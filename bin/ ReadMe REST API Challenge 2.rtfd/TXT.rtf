{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
This is the first release.  It does not have the persistence yet.\
\
What is does have though is all of the testing for for each of the ReST API\'92s for Temperatures.\
\
I created a mock DAO implementation 
\f1\fs22 com.temps.rest.dao.TempsDAOProto 
\f0\fs24 using the interface com.temps.rest.dao.TempsDAO.  It is easier to manage the test data this way.  The next step is to create the the real persistence implementation defined by com.temps.rest.dao.TempsDAO.\
\
Solving the \'93Catch\'94\
\
Celsius and Fahrenheit:\
\
I would define a new Fahrenheit class, creating delegate methods except for the getFahrenheit() method which would convert the celsius temp to Fahrenheit and use a \'93getFahrenheit()\'94 method which would create a json \'93fahrenheit\'94 label.\
\
Creating the Fahrenheit temp after the Celsius temp:\
\
The first approach I thought of was to get the collection of temps, iterate through, inserting a new Fahrenheit element after the Celsius. This however had a problem.  What happens with significant volume?  This approach is not terribly scalable.\
\
I did some investigation into how Spring ReST dealt with the Collection as a parameter.  It used the iterator!!!  It didn\'92t use any of the other methods such as get(int) etc.  It just invoked size() once, then used the Iterator.\
\
The upshot of this.  I can stream an iterator into a new Collection implementation of my choosing.  That means I can ultimately stream a ResultSet using the Collections Iterator interface.  Now, not much memory is being used.  Memory usage is no longer a concern.  And the iterator would always be used small or large.\
\
I created a \'93Fahrenheit\'94 decorator iterator to handle the iterator next() for the Fahrenheit temp after the celsius.  \
\
Please see com.temps.rest.controller.TempsRestController where the two streaming inner classes are:  StreamingCollection and FahrenheitIterator\
\
I used Jetty instead of Tomcat, the Spring default.  Jetty has a heritage of being an embedded server inside an application which is essentially what Spring Boot is.\
\
\
\
\
}